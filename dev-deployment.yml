apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dev-plugin-adapter
  namespace: cc-backend
spec:
  replicas: 1
  serviceName: dev-plugin-adapter
  selector:
    matchLabels:
      app: dev-plugin-adapter
  template:
    metadata:
      labels:
        app: dev-plugin-adapter
    spec:
      containers:
      - name: dev-plugin-adapter
        image: 681930130680.dkr.ecr.us-east-1.amazonaws.com/cloudchainsapp/plugin-adapter:dev
        imagePullPolicy: Always
        ports:
        - containerPort: 5000
        env:
        - name: NAMESPACE
          value: "cc-backend"
        readinessProbe:
          httpGet:
            path: /height
            port: 5000
          successThreshold: 5
          failureThreshold: 1
          periodSeconds: 2
          timeoutSeconds: 2
        livenessProbe:
          httpGet:
            path: /height
            port: 5000
          successThreshold: 5
          failureThreshold: 1
          periodSeconds: 2
          timeoutSeconds: 2
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - dev-plugin-adapter
            topologyKey: "kubernetes.io/hostname"
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: dev-plugin-adapter
  namespace: cc-backend
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://status.core.cloudchainsinc.com"
spec:
  rules:
  - host: plugin-api.dev.core.cloudchainsinc.com
    http:
      paths:
      - backend:
          serviceName: dev-plugin-adapter
          servicePort: 5000
---
apiVersion: v1
kind: Service
metadata:
  name: dev-plugin-adapter
  namespace: cc-backend
  labels:
    app: dev-plugin-adapter
spec:
  ports:
  - protocol: TCP
    port: 5000
    targetPort: 5000
  selector:
    app: dev-plugin-adapter
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: services-list
rules:
- apiGroups: [""]
  resources: ["services"]
  verbs: ["list"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: services-list
subjects:
- kind: ServiceAccount
  name: default
  namespace: cc-backend
roleRef:
  kind: ClusterRole
  name: services-list
  apiGroup: rbac.authorization.k8s.io
